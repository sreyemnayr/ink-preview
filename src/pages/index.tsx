import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'

import { useState, useEffect } from 'react'

import data from '@/data/editions.json'

import NFTPreview from '@/components/NFTPreview'

const inter = Inter({ subsets: ['latin'] })

const exportData = (exportData: any) => {
  const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(
    JSON.stringify(exportData)
  )}`;
  const link = document.createElement("a");
  link.href = jsonString;
  link.download = "editions.json";

  link.click();
};

const foregroundEmoji = (fg: string) => {
  switch (fg){
    case 'white': return '⬜';
    case 'black': return '⬛';
    default: return '❗'
  }
}

const backgroundEmoji = (bg: string) => {
  switch (bg){
    case 'fire': return '🔥';
    case 'water': return '🌊';
    case 'earth': return '⛰️';
    case 'clouds': return '☁️';
    default: return '❗'
  }
}

const tierEmoji = (tier: string) => {
  switch(tier){
    case 'Gold': return '🥇';
    case 'Silver': return '🥈';
    case 'Black': return '🥉';
    default: return '❗';
  }
}


export default function Home() {

  const [nftData, setNftData] = useState(data)
  const [inView, setInView] = useState("1")

  const [stats, setStats] = useState({tiers: {Gold: 0, Silver: 0, Black: 0}, backgrounds: {fire: 0, earth: 0, water: 0, clouds: 0}, foregrounds: {white: 0, black: 0}})


  useEffect(() => {
    console.log(nftData);
    if(JSON.stringify(nftData) != JSON.stringify(data)){
      window.localStorage.setItem("editions", JSON.stringify(nftData));
    }

    setStats(Object.values(nftData).reduce((accum: any, x) => {
      accum.tiers[x._tier] = accum.tiers[x._tier] ? accum.tiers[x._tier] + 1 : 1;
      accum.backgrounds[x._background] = accum.backgrounds[x._background] ? accum.backgrounds[x._background] + 1 : 1;
      accum.foregrounds[x._foreground] = accum.foregrounds[x._foreground] ? accum.foregrounds[x._foreground] + 1 : 1;
      return accum;
    }, {tiers: {Gold: 0, Silver: 0, Black: 0}, backgrounds: {fire: 0, earth: 0, water: 0, clouds: 0}, foregrounds: {white: 0, black: 0}}))

  }, [nftData]);

  const navigateTokens = (move = 1) => {
    if (move < 0){
      if(inView == "1"){
        setInView(Object.values(nftData).length.toString())
      } else {
        setInView((parseInt(inView) + move).toString())
      }
    } else {
      if (inView == Object.values(nftData).length.toString()) {
        setInView("1")
      } else {
        setInView((parseInt(inView) + move).toString())
      }
    }
    
  }

  const updateData = ({tid="", bg="", fg="", t="", tr=""}) => {
    setNftData(
      existingValues => ({
        ...existingValues,
        [tid]: {
          ...(existingValues as any)[tid],
          _foreground: fg,
          _background: bg,
          _title: t,
          _tier: tr,
        }
      })
    )
  }

  return (
    <>
      <Head>
        <title>Order of Ink Art Preview</title>
        <meta name="description" content="Generated by Ryan Meyers" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />

      </Head>
      <main className={styles.main}>
        <div className="image_block">
        <h3 onClick={()=> {navigateTokens(-1)}}>&lt;</h3><select value={inView} onChange={(e) => {
          setInView(e.target.value);
        }}>
          {Object.entries(nftData).map(([tokenId, info]) => {
            return (
              <option key={`opt_${tokenId}`} value={tokenId}>{info.artist} # {tokenId} - {info._title} {tierEmoji(info._tier)}{backgroundEmoji(info._background)}{foregroundEmoji(info._foreground)}</option>
            )
          }) }
        </select>
        <h3 onClick={()=> {navigateTokens(1)}}>&gt;</h3>
        </div>
        
        {Object.entries(nftData).filter(([tokenId, info]) => tokenId == inView).map(([tokenId, info]) => {
          return(
            <>
            <NFTPreview 
              title={info._title}
              tokenId={tokenId}
              tier={info._tier}
              artist={info.artist}
              background_selected={info._background}
              foreground_selected={info._foreground}
              metadata={info._metadata}
              key={`preview_${tokenId}`}
              handler={(tid: string, bg: string, fg: string, t: string, tr:string) => {
              updateData({tid, bg, fg, t, tr})
            }}></NFTPreview>
            </>
          )
        })}
        <div style={{textAlign: 'center'}}>
          <h3>Stats</h3>
        TIERS<br /> {Object.entries(stats.tiers).map(([t,n]) => (`${tierEmoji(t)}${n} `))} <br />
        BACKGROUNDS<br /> {Object.entries(stats.backgrounds).map(([t,n]) => (`${backgroundEmoji(t)}${n} `))}<br />
        FOREGROUNDS<br /> {Object.entries(stats.foregrounds).map(([t,n]) => (`${foregroundEmoji(t)}${n} `))}
        </div>
        <button onClick={() => {exportData(nftData);}}>Export Data</button>
        <button onClick={() => {setNftData(JSON.parse(localStorage.getItem("editions") || JSON.stringify(nftData)))}}>Recover Session</button>
      </main>
    </>
  )
}
